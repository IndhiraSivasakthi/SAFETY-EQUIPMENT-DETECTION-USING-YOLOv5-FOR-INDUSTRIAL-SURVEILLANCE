# -*- coding: utf-8 -*-
"""SAFETY EQUIPMENT DETECTION USING YOLOv5 FOR INDUSTRIAL SURVEILLANCE .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DAUKCP4uR3wmq4G-RXnYddpBhMeDB0cq
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
!pip install -r requirements.txt

!python train.py \
  --img 640 \
  --batch 16 \
  --epochs 50 \
  --data /content/drive/MyDrive/yolo-ppe-dataset/data.yaml \
  --weights yolov5s.pt \
  --name ppe_detector

from google.colab import files
files.download('/content/yolov5/runs/train/ppe_detector3/weights/best.pt')

files.download('/content/yolov5/runs/train/ppe_detector3/results.png')

!cp /content/yolov5/runs/train/ppe_detector3/weights/best.pt /content/drive/MyDrive/

import torch
from google.colab import files

# Step 1: Load the trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Set confidence threshold to 50%

from google.colab import files
uploaded = files.upload()  # Upload your test image here
image_path = next(iter(uploaded))
results = model(image_path)
results.print()     # Print results
results.show()      # Show detection on image
results.save()      # Save the result to "runs/detect/exp/"

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter and show results
results.print()
results.show()
results.save()

# Step 5: Get detected class names with confidence > 0.5
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]
detected_classes = filtered_df['name'].tolist()

# Step 6: Alert system for missing safety equipment
missing_equipment = {
    'head_nohelmet': "ðŸš¨ ALERT: No Helmet Detected!",
    'face_nomask': "ðŸš¨ ALERT: No Mask Detected!",
    'hand_noglove': "ðŸš¨ ALERT: No Glove Detected!",
}

# Alert if vest is missing (not in detections)
if 'vest' not in detected_classes:
    print("ðŸš¨ ALERT: No Vest Detected!")

# Check for any detected missing safety gear
for class_name, alert_msg in missing_equipment.items():
    if class_name in detected_classes:
        print(alert_msg)

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import torch
from google.colab import files
import cv2
from PIL import Image
import matplotlib.pyplot as plt

# Step 1: Load trained model
model = torch.hub.load('ultralytics/yolov5', 'custom', path='/content/drive/MyDrive/best.pt')
model.conf = 0.5  # Confidence threshold

# Step 2: Upload an image
uploaded = files.upload()
image_path = next(iter(uploaded))

# Step 3: Run detection
results = model(image_path)

# Step 4: Filter results
df = results.pandas().xyxy[0]
filtered_df = df[df['confidence'] > 0.5]

# Step 5: Count violators
violator_count = {
    'No Helmet': 0,
    'No Mask': 0,
    'No Glove': 0,
    'No Vest': 0
}

# Step 6: Draw bounding boxes with color coding
image = cv2.imread(image_path)

for i, row in filtered_df.iterrows():
    cls = row['name']
    conf = row['confidence']
    xmin, ymin, xmax, ymax = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])

    # Red = Violation, Green = Safe
    if cls in ['head_nohelmet', 'face_nomask', 'hand_noglove']:
        color = (0, 0, 255)  # Red
        label = f"{cls} ({conf:.2f})"

        if cls == 'head_nohelmet':
            violator_count['No Helmet'] += 1
        elif cls == 'face_nomask':
            violator_count['No Mask'] += 1
        elif cls == 'hand_noglove':
            violator_count['No Glove'] += 1
    else:
        color = (0, 255, 0)  # Green
        label = f"{cls} ({conf:.2f})"

    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, 2)
    cv2.putText(image, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Check for 'vest' presence
if 'vest' not in filtered_df['name'].tolist():
    violator_count['No Vest'] += 1

# Step 7: Display results
cv2.imwrite("result.jpg", image)
display(Image.open("result.jpg"))

# Step 8: Print alerts and summary
print("\n--- SAFETY VIOLATION REPORT ---")
for item, count in violator_count.items():
    if count > 0:
        print(f"ðŸš¨ {item}: {count} case(s) detected")
    else:
        print(f"âœ… {item}: All good")

import os
from collections import Counter

# Path to your training labels folder
labels_path = "/content/drive/MyDrive/yolo-ppe-dataset/train/labels"

class_counts = Counter()

# Loop through all label files
for label_file in os.listdir(labels_path):
    if label_file.endswith(".txt"):
        with open(os.path.join(labels_path, label_file), 'r') as f:
            lines = f.readlines()
            for line in lines:
                class_id = line.strip().split()[0]
                class_counts[int(class_id)] += 1

# Print results
print("Class Counts:", class_counts)

import matplotlib.pyplot as plt

# Step 1: Define class names (you can adjust if your classes differ)
class_names = {
    0: 'head_nohelmet',
    1: 'face_nomask',
    2: 'hand_noglove',
    3: 'vest',
    4: 'helmet',
    5: 'face_mask',
    6: 'person',
    7: 'glove'
}

# Step 2: Class counts from your dataset
class_counts = {6: 5547, 2: 3236, 0: 2512, 3: 1452, 1: 1407, 4: 1330, 5: 1312, 7: 689}

# Step 3: Convert IDs to names for plotting
labels = [class_names[i] for i in class_counts.keys()]
values = list(class_counts.values())

# Step 4: Plot
plt.figure(figsize=(10, 6))
bars = plt.bar(labels, values, color='skyblue')
plt.title("PPE Class Distribution")
plt.xlabel("Class")
plt.ylabel("Count")

# Step 5: Add count labels on top of bars
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval + 50, int(yval), ha='center', va='bottom')

plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()